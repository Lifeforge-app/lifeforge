/* eslint-disable @typescript-eslint/no-misused-promises */
/* eslint-disable @typescript-eslint/no-non-null-assertion */
/* eslint-disable multiline-ternary */
/* eslint-disable @typescript-eslint/member-delimiter-style */
/* eslint-disable @typescript-eslint/indent */
import React, { useEffect, useState } from 'react'
import { Link, useNavigate, useParams } from 'react-router-dom'
import { Icon } from '@iconify/react/dist/iconify.js'
import { toast } from 'react-toastify'
import Error from '../../components/Error'
import Loading from '../../components/Loading'
import { Menu, Transition } from '@headlessui/react'
import EmptyStateScreen from '../../components/EmptyStateScreen'
import ModifyFolderModal from './ModifyFolderModal'
import DeleteFolderConfirmationModal from './DeleteFolderConfirmationModal'
import FILE_ICONS from '../../constants/file_icons'
import moment from 'moment'
import { Tooltip } from 'react-tooltip'
import GoBackButton from '../../components/GoBackButton'

// Generated by https://quicktype.io

export interface INotesEntry {
  collectionId: string
  collectionName: string
  created: string
  id: string
  name: string
  path: string
  subject: string
  type: 'file' | 'folder'
  updated: string
}

export interface INotesPath {
  id: string
  name: string
}

function NotesSubject(): React.ReactElement {
  const [currentPath, setCurrentPath] = useState<
    | {
        icon: string
        path: INotesPath[]
      }
    | 'loading'
    | 'error'
  >('loading')
  const {
    workspace,
    subject,
    '*': path
  } = useParams<{ workspace: string; subject: string; '*': string }>()

  const [notesEntries, setNotesEntries] = useState<
    INotesEntry[] | 'loading' | 'error'
  >('loading')
  const [modifyFolderModalOpenType, setModifyFolderModalOpenType] = useState<
    'create' | 'update' | null
  >(null)
  const [
    deleteFolderConfirmationModalOpen,
    setDeleteFolderConfirmationModalOpen
  ] = useState(false)
  const [existedData, setExistedData] = useState<INotesEntry | null>(null)
  const toastId = React.useRef<any>()

  const navigate = useNavigate()

  function fetchCurrentPath(): void {
    setCurrentPath('loading')
    fetch(
      `${
        import.meta.env.VITE_API_HOST
      }/notes/entry/path/${workspace}/${subject}/${path}`
    )
      .then(async response => {
        const data = await response.json()

        if (response.status !== 200) {
          throw data.message
        }

        setCurrentPath(data.data)
      })
      .catch(() => {
        setCurrentPath('error')
        toast.error('Failed to fetch data from server.')
      })
  }

  function updateNotesEntries(): void {
    setNotesEntries('loading')
    fetch(
      `${import.meta.env.VITE_API_HOST}/notes/entry/list/${subject}/${path}`
    )
      .then(async response => {
        const data = await response.json()
        setNotesEntries(data.data)

        if (response.status !== 200) {
          throw data.message
        }
      })
      .catch(() => {
        setNotesEntries('error')
        toast.error('Failed to fetch data from server.')
      })
  }

  function uploadFiles(): void {
    const fileInput = document.createElement('input')
    fileInput.type = 'file'
    fileInput.multiple = true
    fileInput.click()

    fileInput.addEventListener('change', () => {
      const files = fileInput.files

      if (files === null) {
        return
      }

      const formData = new FormData()

      for (let i = 0; i < files.length; i++) {
        formData.append('files', files[i], encodeURIComponent(files[i].name))
      }

      formData.append(
        'parent',
        path !== undefined ? path.split('/').pop()! : ''
      )

      fetch(
        `${
          import.meta.env.VITE_API_HOST
        }/notes/entry/upload/${workspace}/${subject}/${path}`,
        {
          method: 'PUT',
          body: formData
        }
      )
        .then(async response => {
          const data = await response.json()

          if (response.status !== 200) {
            throw data.message
          }

          toast.success('Yay! Files uploaded.')

          updateNotesEntries()
        })
        .catch(err => {
          toast.error('Failed to upload files. Error: ' + err)
        })
    })
  }

  function uploadFolders(): void {
    const fileInput = document.createElement('input')
    fileInput.type = 'file'
    fileInput.multiple = true
    fileInput.directory = true
    fileInput.webkitdirectory = true
    fileInput.click()

    fileInput.addEventListener('change', async () => {
      const files = fileInput.files

      let uploaded = 0

      if (files === null) {
        return
      }

      const filesChunk = []

      for (let i = 0; i < files.length; i += 10) {
        filesChunk.push(Array.from(files).slice(i, i + 10))
      }

      for (const chunk of filesChunk) {
        const formData = new FormData()

        for (let i = 0; i < chunk.length; i++) {
          formData.append(
            'files',
            chunk[i],
            encodeURIComponent(chunk[i].webkitRelativePath)
          )
        }

        formData.append(
          'parent',
          path !== undefined ? path.split('/').pop()! : ''
        )

        await fetch(
          `${
            import.meta.env.VITE_API_HOST
          }/notes/entry/upload/${workspace}/${subject}/${path}`,
          {
            method: 'POST',
            body: formData
          }
        )
          .then(async response => {
            const data = await response.json()

            if (response.status !== 200) {
              throw data.message
            }
          })
          .catch(err => {
            toast.error('Failed to upload folders. Error: ' + err)
          })

        uploaded += chunk.length

        const progress = uploaded / files.length

        // check if we already displayed a toast
        if (toastId.current === undefined) {
          toastId.current = toast(
            <span className="flex items-center gap-2">
              <Icon icon="tabler:upload" className="h-5 w-5" />
              <span>Uploading folders...</span>
            </span>,
            { progress }
          )
        } else {
          toast.update(toastId.current, { progress })
        }
      }

      updateNotesEntries()

      toast.done(toastId.current)
      toast.dismiss(toastId.current)
      toastId.current = undefined
      toast.success('Yay! Folders uploaded.')
    })
  }

  useEffect(() => {
    fetchCurrentPath()
    updateNotesEntries()
  }, [path])

  return (
    <section className="flex h-full min-h-0 w-full flex-1 flex-col overflow-y-scroll px-8 md:px-12">
      <GoBackButton
        onClick={() => {
          navigate(
            `/notes/${(() => {
              if (path === '') {
                return subject !== undefined ? workspace : '/'
              }

              const pathArray = path!.split('/')
              pathArray.pop()
              return `${workspace}/${subject}/${pathArray.join('/')}`
            })()}`
          )
        }}
      />
      <div className="relative z-[100] flex w-full items-center justify-between gap-4 sm:gap-12">
        <div
          className={`flex min-w-0 flex-1 items-center gap-4 ${
            typeof currentPath !== 'string'
              ? 'text-2xl sm:text-3xl'
              : 'text-2xl'
          } font-semibold`}
        >
          {(() => {
            switch (currentPath) {
              case 'loading':
                return (
                  <>
                    <span className="small-loader-light"></span>
                    Loading...
                  </>
                )
              case 'error':
                return (
                  <>
                    <Icon
                      icon="tabler:alert-triangle"
                      className="mt-0.5 h-7 w-7 text-red-500"
                    />
                    Failed to fetch data from server.
                  </>
                )
              default:
                return (
                  <>
                    <div className="relative rounded-lg p-3">
                      <Icon
                        icon={currentPath.icon}
                        className="text-2xl text-custom-500 sm:text-3xl"
                      />
                      <div className="absolute left-0 top-0 h-full w-full rounded-lg bg-custom-500 opacity-20" />
                    </div>
                    <div className="flex w-full min-w-0 flex-col gap-1">
                      <div className="hidden items-center gap-1 text-sm text-neutral-500 md:flex">
                        {currentPath.path.map((path, index) => (
                          <>
                            <Link
                              to={`/notes/${currentPath.path
                                .slice(0, index + 1)
                                .map(path => path.id)
                                .join('/')}`}
                              key={index}
                              className={`${
                                index === currentPath.path.length - 1
                                  ? 'text-custom-500'
                                  : ''
                              } whitespace-nowrap`}
                            >
                              {path.name.slice(0, 20) +
                                (path.name.length > 20 ? '...' : '')}
                            </Link>
                            {index !== currentPath.path.length - 1 && (
                              <Icon
                                icon="tabler:chevron-right"
                                className="h-4 w-4 shrink-0 text-neutral-500"
                              />
                            )}
                          </>
                        ))}
                      </div>
                      <h1 className="w-full truncate">
                        {currentPath.path[currentPath.path.length - 1].name}
                      </h1>
                    </div>
                  </>
                )
            }
          })()}
        </div>
        <div className="flex items-center gap-4">
          <button className="hidden rounded-lg p-4 text-neutral-500 transition-all hover:bg-neutral-200/50 hover:text-neutral-900 dark:hover:bg-neutral-700/50 dark:hover:text-neutral-100 md:block">
            <Icon icon="tabler:search" className="text-2xl" />
          </button>
          <button className="hidden rounded-lg p-4 text-neutral-500 transition-all hover:bg-neutral-200/50 hover:text-neutral-900 dark:hover:bg-neutral-700/50 dark:hover:text-neutral-100 md:block">
            <Icon icon="tabler:filter" className="text-2xl" />
          </button>
          <Menu as="div" className="relative z-50 hidden md:block">
            <Menu.Button className="flex items-center gap-2 rounded-lg bg-custom-500 p-4 pr-5 font-semibold uppercase tracking-wider text-neutral-100 shadow-[4px_4px_10px_0px_rgba(0,0,0,0.05)] transition-all hover:bg-custom-600 dark:text-neutral-800">
              <Icon icon="tabler:plus" className="text-xl" />
              new
            </Menu.Button>
            <Transition
              enter="transition duration-100 ease-out"
              enterFrom="transform scale-95 opacity-0"
              enterTo="transform scale-100 opacity-100"
              leave="transition duration-75 ease-out"
              leaveFrom="transform scale-100 opacity-100"
              leaveTo="transform scale-95 opacity-0"
              className="absolute right-0 top-8"
            >
              <Menu.Items className="mt-8 w-48 overflow-hidden overscroll-contain rounded-md bg-neutral-100 shadow-lg outline-none focus:outline-none dark:bg-neutral-800">
                <Menu.Item>
                  {({ active }) => (
                    <button
                      onClick={() => {
                        setModifyFolderModalOpenType('create')
                        setExistedData(null)
                      }}
                      className={`${
                        active
                          ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                          : 'text-neutral-500'
                      } flex w-full items-center p-4`}
                    >
                      <Icon icon="tabler:folder-plus" className="h-5 w-5" />
                      <span className="ml-2">New Folder</span>
                    </button>
                  )}
                </Menu.Item>
                <div className="w-full border-b border-neutral-300 dark:border-neutral-700" />
                <Menu.Item>
                  {({ active }) => (
                    <button
                      onClick={uploadFiles}
                      className={`${
                        active
                          ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                          : 'text-neutral-500'
                      } flex w-full items-center p-4`}
                    >
                      <Icon icon="ci:file-upload" className="h-5 w-5" />
                      <span className="ml-2">File upload</span>
                    </button>
                  )}
                </Menu.Item>
                <Menu.Item>
                  {({ active }) => (
                    <button
                      onClick={uploadFolders}
                      className={`${
                        active
                          ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                          : 'text-neutral-500'
                      } flex w-full items-center p-4`}
                    >
                      <Icon icon="ci:folder-upload" className="h-5 w-5" />
                      <span className="ml-2">Folder upload</span>
                    </button>
                  )}
                </Menu.Item>
              </Menu.Items>
            </Transition>
          </Menu>
          <button className="rounded-lg p-4 text-neutral-500 transition-all hover:bg-neutral-200/50 hover:text-neutral-800 dark:hover:bg-neutral-800 dark:hover:text-neutral-100">
            <Icon icon="tabler:dots-vertical" className="text-xl sm:text-2xl" />
          </button>
        </div>
      </div>
      {(() => {
        switch (notesEntries) {
          case 'loading':
            return <Loading />
          case 'error':
            return <Error message="Failed to fetch data from server." />
          default:
            return notesEntries.length > 0 ? (
              <ul className="mt-6 flex h-full min-h-0 flex-col divide-y divide-neutral-300 overflow-y-auto dark:divide-neutral-700/50">
                {notesEntries
                  .sort(
                    (a, b) =>
                      -a.type.localeCompare(b.type) ||
                      a.name.localeCompare(b.name)
                  )
                  .map(entry => (
                    <li
                      key={entry.id}
                      className="relative mt-0 flex min-w-0 items-center justify-between gap-4 p-6"
                    >
                      <Icon
                        icon={
                          {
                            file:
                              FILE_ICONS[entry.name.split('.').pop()!] ||
                              'tabler:file',
                            folder: 'tabler:folder'
                          }[entry.type]
                        }
                        className="pointer-events-auto z-50 h-7 w-7 shrink-0 text-neutral-500"
                      />
                      <div className="flex w-full min-w-0 items-center justify-between gap-8">
                        <div className="pointer-events-none z-50 w-[20rem] truncate text-lg font-medium text-neutral-900 dark:text-neutral-100">
                          {entry.name}
                        </div>
                        <div className="z-50 hidden w-1/5 shrink-0 items-center md:flex">
                          <div
                            data-tooltip-id={`date-tooltip-${entry.id}`}
                            data-tooltip-content={moment(entry.updated).format(
                              'MMMM Do YYYY, h:mm:ss a'
                            )}
                            className="z-50 shrink-0 text-neutral-500 dark:text-neutral-400"
                          >
                            {moment(entry.updated).fromNow()}
                          </div>
                          <Tooltip
                            id={`date-tooltip-${entry.id}`}
                            className="z-50"
                          />
                        </div>
                        {entry.type === 'folder' && (
                          <Link
                            to={`./${entry.id}`}
                            className="absolute left-0 top-0 h-full w-full rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50"
                          />
                        )}
                        <Menu as="div" className="relative">
                          <Menu.Button className="rounded-md p-2 text-neutral-500  hover:bg-neutral-200/50 hover:text-neutral-500 dark:hover:bg-neutral-700/30">
                            <Icon
                              icon="tabler:dots-vertical"
                              className="h-5 w-5"
                            />
                          </Menu.Button>
                          <Transition
                            enter="transition duration-100 ease-out"
                            enterFrom="transform scale-95 opacity-0"
                            enterTo="transform scale-100 opacity-100"
                            leave="transition duration-75 ease-out"
                            leaveFrom="transform scale-100 opacity-100"
                            leaveTo="transform scale-95 opacity-0"
                            className="absolute right-0 top-3 z-50"
                          >
                            <Menu.Items className="mt-8 w-48 overflow-hidden overscroll-contain rounded-md bg-neutral-100 shadow-lg outline-none focus:outline-none dark:bg-neutral-800">
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    onClick={() => {
                                      setModifyFolderModalOpenType('update')
                                      setExistedData(entry)
                                    }}
                                    className={`${
                                      active
                                        ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                                        : 'text-neutral-500'
                                    } flex w-full items-center p-4`}
                                  >
                                    <Icon
                                      icon="tabler:edit"
                                      className="h-5 w-5"
                                    />
                                    <span className="ml-2">Rename</span>
                                  </button>
                                )}
                              </Menu.Item>
                              <Menu.Item>
                                {({ active }) => (
                                  <button
                                    onClick={() => {
                                      setDeleteFolderConfirmationModalOpen(true)
                                      setExistedData(entry)
                                    }}
                                    className={`${
                                      active
                                        ? 'bg-neutral-200/50 text-red-600 dark:bg-neutral-700'
                                        : 'text-red-500'
                                    } flex w-full items-center p-4`}
                                  >
                                    <Icon
                                      icon="tabler:trash"
                                      className="h-5 w-5"
                                    />
                                    <span className="ml-2">Delete</span>
                                  </button>
                                )}
                              </Menu.Item>
                            </Menu.Items>
                          </Transition>
                        </Menu>
                      </div>
                    </li>
                  ))}
              </ul>
            ) : (
              <EmptyStateScreen
                ctaContent="New Note"
                icon="tabler:file-off"
                title="Hmm... it seems a bit empty here."
                description="Time to upload some notes!"
                setModifyModalOpenType={() => {}}
              />
            )
        }
      })()}
      <Menu as="div" className="absolute bottom-8 right-8 z-50 md:hidden">
        <Menu.Button className="flex items-center gap-2 rounded-lg bg-custom-500 p-4 pr-5 font-semibold uppercase tracking-wider text-neutral-100 shadow-[4px_4px_10px_0px_rgba(0,0,0,0.05)] transition-all hover:bg-custom-600 dark:text-neutral-800">
          <Icon icon="tabler:plus" className="text-xl" />
          new
        </Menu.Button>
        <Transition
          enter="transition duration-100 ease-out"
          enterFrom="transform scale-95 opacity-0"
          enterTo="transform scale-100 opacity-100"
          leave="transition duration-75 ease-out"
          leaveFrom="transform scale-100 opacity-100"
          leaveTo="transform scale-95 opacity-0"
          className="absolute right-0 top-8"
        >
          <Menu.Items className="mt-8 w-48 overflow-hidden overscroll-contain rounded-md bg-neutral-100 shadow-lg outline-none focus:outline-none dark:bg-neutral-800">
            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={() => {
                    setModifyFolderModalOpenType('create')
                    setExistedData(null)
                  }}
                  className={`${
                    active
                      ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                      : 'text-neutral-500'
                  } flex w-full items-center p-4`}
                >
                  <Icon icon="tabler:folder-plus" className="h-5 w-5" />
                  <span className="ml-2">New Folder</span>
                </button>
              )}
            </Menu.Item>
            <div className="w-full border-b border-neutral-300 dark:border-neutral-700" />
            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={uploadFiles}
                  className={`${
                    active
                      ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                      : 'text-neutral-500'
                  } flex w-full items-center p-4`}
                >
                  <Icon icon="ci:file-upload" className="h-5 w-5" />
                  <span className="ml-2">File upload</span>
                </button>
              )}
            </Menu.Item>
            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={uploadFolders}
                  className={`${
                    active
                      ? 'bg-neutral-200/50 text-neutral-800 dark:bg-neutral-700 dark:text-neutral-100'
                      : 'text-neutral-500'
                  } flex w-full items-center p-4`}
                >
                  <Icon icon="ci:folder-upload" className="h-5 w-5" />
                  <span className="ml-2">Folder upload</span>
                </button>
              )}
            </Menu.Item>
          </Menu.Items>
        </Transition>
      </Menu>
      <ModifyFolderModal
        openType={modifyFolderModalOpenType}
        setOpenType={setModifyFolderModalOpenType}
        existedData={existedData}
        updateNotesEntries={updateNotesEntries}
      />
      <DeleteFolderConfirmationModal
        isOpen={deleteFolderConfirmationModalOpen}
        closeModal={() => {
          setExistedData(null)
          setDeleteFolderConfirmationModalOpen(false)
        }}
        folderDetails={existedData}
        updateNotesEntries={updateNotesEntries}
      />
    </section>
  )
}

export default NotesSubject
